#!/usr/bin/env node

/**
 * ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Environment Variables
 * ‡∏£‡∏±‡∏ô: node setup-env.js
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üöÄ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment Variables ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ Restaurant Website\n');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
function createEnvFile(filePath, content) {
  try {
    fs.writeFileSync(filePath, content);
    console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå ${filePath} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
    return true;
  } catch (error) {
    console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå ${filePath}:`, error.message);
    return false;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Secret ‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
function generateJWTSecret() {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()';
  let secret = '';
  for (let i = 0; i < 64; i++) {
    secret += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return secret;
}

async function main() {
  try {
    // 1. ‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Development ‡∏´‡∏£‡∏∑‡∏≠ Production
    console.log('üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î:');
    console.log('1) Development (Local)');
    console.log('2) Production (Deploy)');
    const mode = await question('\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î (1 ‡∏´‡∏£‡∏∑‡∏≠ 2): ');

    const isDev = mode.trim() === '1';

    // 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Backend Environment
    console.log('\nüîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Backend Environment Variables...\n');

    let backendEnv = '';
    
    if (isDev) {
      // Development Mode
      const jwtSecret = generateJWTSecret();
      backendEnv = `PORT=5000
MONGODB_URI=mongodb://localhost:27017/restaurantdb
NODE_ENV=development
JWT_SECRET=${jwtSecret}
FRONTEND_URL=http://localhost:3000
`;
      createEnvFile(path.join(__dirname, 'backend', 'config.env'), backendEnv);
      console.log('üìù ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Development\n');
      
    } else {
      // Production Mode
      const mongoUri = await question('MongoDB Atlas Connection String: ');
      const jwtSecret = await question('JWT Secret (‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥): ');
      const frontendUrl = await question('Frontend URL (‡πÄ‡∏ä‡πà‡∏ô https://yourapp.vercel.app): ');
      
      const finalJwtSecret = jwtSecret.trim() || generateJWTSecret();
      
      backendEnv = `PORT=5000
MONGODB_URI=${mongoUri.trim()}
NODE_ENV=production
JWT_SECRET=${finalJwtSecret}
FRONTEND_URL=${frontendUrl.trim()}
`;
      createEnvFile(path.join(__dirname, 'backend', 'config.env'), backendEnv);
    }

    // 3. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Frontend Environment
    console.log('\nüé® ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Frontend Environment Variables...\n');

    let frontendEnv = '';
    
    if (isDev) {
      frontendEnv = 'REACT_APP_API_URL=http://localhost:5000/api\n';
      console.log('üìù ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Development\n');
    } else {
      const backendUrl = await question('Backend API URL (‡πÄ‡∏ä‡πà‡∏ô https://your-api.onrender.com/api): ');
      frontendEnv = `REACT_APP_API_URL=${backendUrl.trim()}\n`;
    }
    
    createEnvFile(path.join(__dirname, 'frontend', '.env'), frontendEnv);

    // 4. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    console.log('\n‚ú® ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!\n');
    console.log('üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß:');
    console.log('  - backend/config.env');
    console.log('  - frontend/.env');
    console.log('\nüí° ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:');
    if (isDev) {
      console.log('  1. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á MongoDB (‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ MongoDB Atlas)');
      console.log('  2. cd backend && npm install');
      console.log('  3. cd frontend && npm install');
      console.log('  4. ‡∏£‡∏±‡∏ô Backend: cd backend && npm start');
      console.log('  5. ‡∏£‡∏±‡∏ô Frontend: cd frontend && npm start');
      console.log('\nüìñ ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà: QUICK_START.md');
    } else {
      console.log('  1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô backend/config.env');
      console.log('  2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô frontend/.env');
      console.log('  3. Copy Environment Variables ‡πÑ‡∏õ‡πÉ‡∏™‡πà‡πÉ‡∏ô Render/Vercel');
      console.log('\nüìñ ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà: DEPLOYMENT_GUIDE.md');
    }
    console.log('\nüéâ Happy Coding!\n');

  } catch (error) {
    console.error('\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
  } finally {
    rl.close();
  }
}

// ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
main();

